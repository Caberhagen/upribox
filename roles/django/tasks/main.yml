---
- include: ../../common/tasks/other_env.yml

- name: create dir for django webapp
  file: path=/usr/share/nginx/www-upri-interface state=directory

- name: copy django webapp
  synchronize: src=upribox_interface/ dest=/usr/share/nginx/www-upri-interface delete=yes recursive=yes checksum=yes
  register: copy_django
  notify: reload uwsgi

- name: set django webapp permissions
  file: path=/usr/share/nginx/www-upri-interface recurse=yes owner="{{'www-data' if env == 'development' else 'root' }}" group="{{'www-data' if env == 'development' else 'root' }}" state=directory

- name: install redis server
  apt: name=redis-server state="{{ apt_target_state }}" force=yes update_cache=yes cache_valid_time="{{ apt_cache_time }}"

- name: enable redis server
  service: name=redis-server enabled=yes

- name: install virtualenv
  apt: name=python-virtualenv state="{{ apt_target_state }}" force=yes update_cache=yes cache_valid_time="{{ apt_cache_time }}"
  notify: restart uwsgi

- name: install requirements to virtualenv
  pip: requirements=/usr/share/nginx/www-upri-interface/requirements.txt virtualenv=/var/webapp-virtualenv/ extra_args="--upgrade"
  notify: reload uwsgi

- name: check installed uWSGI version
  shell: pip show uwsgi | grep Version | cut -d " " -f 2
  register: installed_uwsgi_version

- name: stop uwsgi for updating
  service: name=django-uwsgi state=stopped
  when: installed_uwsgi_version.stdout != ansible_uwsgi_version

- name: install uWSGI
  pip: name=uwsgi state=present version="{{ansible_uwsgi_version}}"
  notify: restart uwsgi

- name: create directory for uwsgi
  file: path=/etc/uwsgi/ state=directory

- name: install django-uwsgi systemd service
  copy: src=django-uwsgi.service dest=/etc/systemd/system/ mode="644"
  notify: restart uwsgi
  register: res

- name: reload systemd services
  command: systemctl daemon-reload
  when: res|changed

- name: remove default logfiles
  file: path=/var/log/uwsgi.log state=absent
  when: res|changed

- name: add uwsgi vasall
  template: src=upri_uwsgi.j2 dest=/etc/uwsgi/upri_uwsgi.ini
  notify:
    - reload uwsgi

- name: create directory for django database
  file: path=/var/upribox-interface/ state=directory mode=755 owner=www-data group=www-data

- name: enable uwsgi django service
  service: name=django-uwsgi enabled=yes

- name: delete development database
  file: path=/usr/share/nginx/www-upri-interface/db.sqlite3 state=absent
  when: env == "production"

- name: check django for errors
  django_manage: settings="{{ django_settings_file }}" command="help" app_path=/usr/share/nginx/www-upri-interface virtualenv=/var/webapp-virtualenv
  become_user: www-data
  register: django_res
  changed_when: django_res|changed or django_res|failed
  notify:
    - uninstall django on errors

- name: migrate django database
  django_manage: settings="{{ django_settings_file }}" command="migrate --fake-initial" app_path=/usr/share/nginx/www-upri-interface virtualenv=/var/webapp-virtualenv
  become_user: www-data

- name: add development user (upri/upri)
  django_manage: settings="{{ django_settings_file }}" command=loaddata fixtures=dev_user.json app_path=/usr/share/nginx/www-upri-interface virtualenv=/var/webapp-virtualenv
  become_user: www-data
  when: env == "development"

- name: collect static
  django_manage: settings="{{ django_settings_file }}" command=collectstatic app_path=/usr/share/nginx/www-upri-interface virtualenv=/var/webapp-virtualenv

- name: install dependency for management script via pip
  pip: name="{{ item.name }}" state=present version="{{ item.version }}"
  with_items:
    - { name: 'jsonmerge', version: '1.3.0' }
    - { name: 'functools32', version: '3.2.3-2' }
    - { name: 'redis', version: '2.10.5' }
    - { name: 'netifaces', version: '0.10.5' }
    - { name: 'netaddr', version: '0.7.19' }
    - { name: 'argcomplete', version: '1.8.2'}

- name: install supervisor for rqworker
  apt: name=supervisor state="{{ apt_target_state }}" force=yes update_cache=yes cache_valid_time="{{ apt_cache_time }}"

- name: install supervisor systemd service
  copy: src=supervisor.service dest=/etc/systemd/system/ mode="644"
  register: srvchanged

- name: reload systemd services
  command: systemctl daemon-reload
  when: srvchanged |changed
  notify: restart supervisor

- name: enable supervisord
  service: name=supervisor enabled=yes

- name: change logdir of supervisor
  lineinfile:
    dest: /etc/supervisor/supervisord.conf
    regexp: "^logfile="
    line: "logfile={{default_settings.log.general.path}}/{{default_settings.log.supervisor.logfiles.logname}}"
  notify: restart supervisor
  register: res2

- name: change child-logdir of supervisor
  lineinfile:
    dest: /etc/supervisor/supervisord.conf
    regexp: "^childlogdir="
    line: "childlogdir={{default_settings.log.general.path}}"
  notify: restart supervisor
  register: res3

- name: copy supervisor rqworker conf file
  template: src=rqworker.conf dest=/etc/supervisor/conf.d/rqworker.conf owner=root group=root mode=755
  register: sv_config
  notify: restart supervisor

- name: remove default logfiles
  file: path=/var/log/supervisor state=absent
  #when: res1 |changed or res2 |changed or res3 |changed or sv_config |changed

  # also delete rotated log files
  # ansible 2.x would cover this task with find and file module
- name: remove supervisor log files from other environment
  file: path='{{other_env.default_settings.log.general.path}}/{{item.value}}' state=absent
  # shell: "rm {{other_env.default_settings.log.general.path}}/{{item.value}}*"
  with_dict: "{{other_env.default_settings.log.supervisor.logfiles}}"
  # register: res
  when: res2 |changed or res3 |changed or sv_config |changed
  # failed_when: res.rc != 0 and res.rc != 1
  # changed_when: res.rc == 0

- name: remove rqworker log files from other environment
  file: path='{{other_env.default_settings.log.general.path}}/{{item.value}}' state=absent
  # shell: "rm {{other_env.default_settings.log.general.path}}/{{item.value}}*"
  with_dict: "{{other_env.default_settings.log.rqworker.logfiles}}"
  # register: res
  when: res2 |changed or res3 |changed or sv_config |changed
  # failed_when: res.rc != 0 and res.rc != 1
  # changed_when: res.rc == 0

- name: restart supervisor myworker task
  shell: "supervisorctl restart myworker"
  when:  copy_django is defined and copy_django|changed and sv_config is defined and not sv_config|changed

- name: copy management scripts
  copy: src="{{ item.src }}" dest="{{ item.dest }}" owner=root group=root mode=755
  with_items:
    - { src: 'upri-config.py', dest: '/usr/local/bin/upri-config.py' }
    - { src: 'argparser.py', dest: '/usr/local/bin/argparser.py' }
  tags:
    - upri_config

- name: check if log files already exist
  stat:
    path: "{{ item }}"
  with_items:
    - "{{default_settings.log.general.path}}/{{default_settings.log.dnsmasq.subdir}}/{{default_settings.log.dnsmasq.logfiles.logname}}"
    - "{{default_settings.log.general.path}}/{{default_settings.log.privoxy.subdir}}/{{default_settings.log.privoxy.logfiles.logname}}"
  register: log_files

- name: cleanup statistics
  shell: "/var/webapp-virtualenv/bin/python /usr/share/nginx/www-upri-interface/manage.py cleanup --settings {{django_settings_file}}"

- name: update block statistics
  shell: "/usr/local/bin/upri-config.py parse_logs"
  register: update_result
  changed_when: "update_result.rc == 1"
  failed_when: "update_result.rc != 0 and update_result.rc != 1"
  when: not False in (log_files.results | map(attribute='stat.exists') | list)

- name: modify logrotate.d entry
  template: src=logrotate.j2 dest=/etc/logrotate.d/supervisor mode=0644

- name: modify logrotate.d entry
  template: src=logrotate_uwsgi.j2 dest=/etc/logrotate.d/uwsgi mode=0644
