# The ddns-updates-style parameter controls whether or not the server will
# attempt to do a DNS update when a lease is confirmed. We default to the
# behavior of the version 2 packages ('none', since DHCP v2 didn't
# have support for DDNS.)
ddns-update-style none;

default-lease-time 600;
max-lease-time 7200;

# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
#authoritative;

# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
log-facility local7;

{% if silent|bool%}
subnet 192.168.55.0 netmask 255.255.255.0 {
        option routers                  192.168.55.254;
        option subnet-mask              255.255.255.0;
        option broadcast-address        192.168.55.255;
        option domain-name-servers      192.168.55.254;
	range 192.168.55.100 192.168.55.200;
        default-lease-time 86400;
        max-lease-time 86400;
}
{% endif %}

{% if tor|bool%}
subnet 192.168.56.0 netmask 255.255.255.0 {
        option routers                  192.168.56.254;
        option subnet-mask              255.255.255.0;
        option broadcast-address        192.168.56.255;
        option domain-name-servers      192.168.56.254;
	range 192.168.56.100 192.168.56.200;
        default-lease-time 86400;
        max-lease-time 86400;
}
{% endif %}

{% if ansible_local is defined and ansible_local.dhcpd is defined and ansible_local.dhcpd.general is defined and ansible_local.dhcpd.general.enabled is defined and ansible_local.dhcpd.general.enabled | default(default_settings.dhcpd.general.enabled) | bool %}
{% if ansible_local is defined and ansible_local.interfaces is defined and ansible_local.interfaces.general is defined and ansible_local.interfaces.general.mode | default(default_settings.interfaces.general.mode) == "static" and ansible_local.interfaces.static is defined %}
{% set dhcpd_ip = ansible_local.interfaces.static.ip | default(default_settings.interfaces.static.ip) %}
{% set dhcpd_netmask = ansible_local.interfaces.static.netmask | default(default_settings.interfaces.static.netmask) %}
{% set dhcpd_tmp = dhcpd_ip ~ "/" ~ dhcpd_netmask %}
subnet {{ dhcpd_tmp | ipaddr('network')}} netmask {{ ansible_local.interfaces.static.netmask | default(default_settings.interfaces.static.netmask) }} {
        interface eth0;
        option routers                  {{ ansible_local.interfaces.static.ip | default(default_settings.interfaces.static.ip) }};
        option subnet-mask              {{ ansible_local.interfaces.static.netmask | default(default_settings.interfaces.static.netmask) }};
        option broadcast-address        {{ dhcpd_tmp | ipaddr('broadcast') }};
        option domain-name-servers      {{ ansible_local.interfaces.static.ip | default(default_settings.interfaces.static.ip) }};
        range {{ dhcpd_tmp | ipaddr('130') | ipaddr('address') }} {{ dhcpd_tmp | ipaddr('200') | ipaddr('address') }};
        default-lease-time 86400;
        max-lease-time 86400;

        {% if ansible_local is defined and ansible_local.devices is defined and ansible_local.devices.no_adblocking is defined %}
        {% for m in ansible_local.devices.no_adblocking %}
        {% set broadcast_tmp = ansible_default_ipv4.gateway ~ "/" ~  ansible_default_ipv4.netmask %}

        host {{ m.replace(':','-') }} {
              hardware ethernet             {{ m }};
              fixed-address                 {{ broadcast_tmp | ipaddr(loop.index0+60) | ipaddr('address') }};
              option routers                {{ ansible_default_ipv4.gateway }};
              option subnet-mask            {{ ansible_default_ipv4.netmask }};
              option broadcast-address      {{ broadcast_tmp | ipaddr('broadcast') }};
              option domain-name-servers    {{ ansible_default_ipv4.gateway }};
        }

        {% endfor %}
        {% endif %}

}

{% endif %}
{% endif %}
